import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from scipy.stats import norm

def fetch_data(tickers, start, end):
    """Fetch data for multiple tickers"""
    data = pd.DataFrame()
    for ticker in tickers:
        temp = yf.download(ticker, start=start, end=end)['Adj Close']
        data[ticker] = temp
    return data

def preprocess_data(data, frequency='daily'):
    """Calculate log returns for multiple assets"""
    if frequency == 'daily':
        log_returns = np.log(data / data.shift(1))
    elif frequency == 'weekly':
        log_returns = np.log(data.resample('W').last() / data.resample('W').last().shift(1))
    elif frequency == 'monthly':
        log_returns = np.log(data.resample('M').last() / data.resample('M').last().shift(1))
    return log_returns.dropna()

def calculate_metrics(data, log_returns, confidence_level=95):
    """Calculate all risk metrics for each asset"""
    metrics = {}
    
    for column in log_returns.columns:
        # Calculate simple returns for return metrics
        simple_returns = data[column].pct_change().dropna()
        
        # Calculate cumulative return (using simple returns)
        cumulative_return = (np.prod(1 + simple_returns) - 1) * 100
        
        # Calculate average daily return
        avg_daily_return = simple_returns.mean() * 100
        
        # Calculate volatility (using log returns for better statistical properties)
        daily_vol = log_returns[column].std()
        annualized_vol = daily_vol * np.sqrt(252)
        
        # Historical VaR and CVaR (using log returns)
        hist_var = -np.percentile(log_returns[column], 100 - confidence_level)
        losses = -log_returns[column]
        var_threshold = np.percentile(losses, confidence_level)
        hist_cvar = losses[losses >= var_threshold].mean()
        
        # Parametric VaR and CVaR (using log returns)
        mean = log_returns[column].mean()
        std_dev = log_returns[column].std()
        param_var = -norm.ppf(1 - confidence_level / 100) * std_dev + mean
        param_cvar = -mean + std_dev * norm.pdf(norm.ppf(confidence_level / 100)) / (1 - confidence_level / 100)
        
        metrics[column] = {
            'Cumulative Return (%)': cumulative_return,
            'Average Daily Return (%)': avg_daily_return,
            'Daily Volatility (%)': daily_vol * 100,
            'Annualized Volatility (%)': annualized_vol * 100,
            f'Historical VaR {confidence_level}% (%)': hist_var * 100,
            f'Historical CVaR {confidence_level}% (%)': hist_cvar * 100,
            f'Parametric VaR {confidence_level}% (%)': param_var * 100,
            f'Parametric CVaR {confidence_level}% (%)': param_cvar * 100
        }
    
    return pd.DataFrame.from_dict(metrics, orient='index')

def plot_metrics(data, log_returns, metrics, confidence_level):
    """Create visualization for multiple assets"""
    n_assets = len(log_returns.columns)
    fig = plt.figure(figsize=(15, 5 * n_assets))
    
    for idx, asset in enumerate(log_returns.columns, 1):
        # Plot returns distribution
        plt.subplot(n_assets, 2, 2*idx-1)
        plt.hist(log_returns[asset], bins=50, density=True, alpha=0.7, label='Returns Distribution')
        plt.axvline(x=-metrics.loc[asset, f'Historical VaR {confidence_level}% (%)']/100,
                   color='r', linestyle='--', label=f'Historical VaR {confidence_level}%')
        plt.axvline(x=-metrics.loc[asset, f'Historical CVaR {confidence_level}% (%)']/100,
                   color='g', linestyle='--', label=f'Historical CVaR {confidence_level}%')
        plt.title(f'{asset} Returns Distribution and Risk Metrics')
        plt.legend()
        
        # Plot cumulative returns
        plt.subplot(n_assets, 2, 2*idx)
        simple_returns = data[asset].pct_change().dropna()
        cum_returns = (1 + simple_returns).cumprod() - 1
        plt.plot(cum_returns * 100, label='Cumulative Returns (%)')
        plt.title(f'{asset} Cumulative Returns')
        plt.ylabel('Cumulative Returns (%)')
        plt.legend()
    
    plt.tight_layout()
    return fig

def main():
    # User inputs
    tickers = ['BTC-USD', 'LINK-USD']  # Add more tickers here
    start_date = '2024-05-24'
    end_date = '2024-11-24'
    frequency = 'daily'
    confidence_level = 95
    
    # Fetch and process data
    print(f"Fetching data for {', '.join(tickers)}...")
    data = fetch_data(tickers, start_date, end_date)
    log_returns = preprocess_data(data, frequency)
    
    # Calculate metrics
    print("\nCalculating risk metrics...")
    metrics_df = calculate_metrics(data, log_returns, confidence_level)
    
    # Save metrics to CSV
    output_file = 'crypto_risk_metrics.csv'
    metrics_df.to_csv(output_file)
    print(f"\nMetrics saved to {output_file}")
    print("\nMetrics Summary:")
    print(metrics_df)
    
    # Create and save visualization
    print("\nGenerating visualizations...")
    fig = plot_metrics(data, log_returns, metrics_df, confidence_level)
    plt.savefig('crypto_risk_analysis.png')
    plt.close()
    print("Visualizations saved as 'crypto_risk_analysis.png'")

if __name__ == "__main__":
    main()
